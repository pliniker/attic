#############################################################################
# Makefile for building: libStdSynapticLayer.1.0.0.dylib
# Generated by qmake (1.07a) (Qt 3.3.4) on: Sat Jul 22 12:43:58 2006
# Project:  StdSynapticLayer.pro
# Template: lib
# Command: $(QMAKE) "PREFIX=/Users/peter/src/phd/binary/" "CONFIG+=debug" -o Makefile StdSynapticLayer.pro
#############################################################################

####### Compiler, tools and options

CC       = cc
CXX      = c++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -g -fPIC  
CXXFLAGS = -pipe -Wall -W -g -Wno-long-double -fPIC  
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/opt/local/share/qt3/mkspecs/macx-g++ -I. -I. -I.. -I../../brainlib -I../../navigator -I/usr/include/libxml2 -I../BaseTypes -I/opt/local/include
LINK     = c++
LFLAGS   = -headerpad_max_install_names -prebind -dynamiclib -compatibility_version	1.0 -current_version	1.0.0 -install_name	libStdSynapticLayer.1.dylib
LIBS     = $(SUBLIBS)  -L/Users/peter/src/phd/binary//lib -L/Users/peter/src/phd/binary//plugins -lbrainlib -lnavigator -lSynapticMap -lxml2 -lz -lpthread -lm -lboost_signals -L/opt/local/lib/
AR       = ar cq
RANLIB   = ranlib -s
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= cp -f
COPY_DIR = cp -f -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = 
SOURCES = StdSynapticLayer.cpp
OBJECTS = StdSynapticLayer.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = 
OBJMOC = 
DIST	   = StdSynapticLayer.pro
QMAKE_TARGET = StdSynapticLayer
DESTDIR  = ../../../binary/plugins/
TARGET   = libStdSynapticLayer.1.0.0.dylib
TARGETA	= ../../../binary/plugins/libStdSynapticLayer.a
TARGETD	= libStdSynapticLayer.1.0.0.dylib
TARGET0	= libStdSynapticLayer.dylib
TARGET1	= libStdSynapticLayer.1.dylib
TARGET2	= libStdSynapticLayer.1.0.dylib

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile  ../../../binary/plugins/$(TARGET)

../../../binary/plugins/$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(SUBLIBS) $(OBJCOMP)  
	test -d ../../../binary/plugins/ || mkdir -p ../../../binary/plugins/
	-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS) $(OBJCOMP)
	-ln -s $(TARGET) $(TARGET0)
	-ln -s $(TARGET) $(TARGET1)
	-ln -s $(TARGET) $(TARGET2)
	-$(DEL_FILE) ../../../binary/plugins/$(TARGET)
	-$(DEL_FILE) ../../../binary/plugins/$(TARGET0)
	-$(DEL_FILE) ../../../binary/plugins/$(TARGET1)
	-$(DEL_FILE) ../../../binary/plugins/$(TARGET2)
	-$(MOVE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2) ../../../binary/plugins/



staticlib: $(TARGETA)

$(TARGETA):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(OBJCOMP)
	-$(DEL_FILE) $(TARGETA) 
	$(AR) $(TARGETA) $(OBJECTS) $(OBJMOC)
	$(RANLIB) $(TARGETA)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: StdSynapticLayer.pro  /opt/local/share/qt3/mkspecs/macx-g++/qmake.conf 
	$(QMAKE) "PREFIX=/Users/peter/src/phd/binary/" "CONFIG+=debug" -o Makefile StdSynapticLayer.pro
qmake: 
	@$(QMAKE) "PREFIX=/Users/peter/src/phd/binary/" "CONFIG+=debug" -o Makefile StdSynapticLayer.pro

dist: 
	@mkdir -p .tmp/StdSynapticLayer && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/StdSynapticLayer/ && ( cd `dirname .tmp/StdSynapticLayer` && $(TAR) StdSynapticLayer.tar StdSynapticLayer && $(GZIP) StdSynapticLayer.tar ) && $(MOVE) `dirname .tmp/StdSynapticLayer`/StdSynapticLayer.tar.gz . && $(DEL_FILE) -r .tmp/StdSynapticLayer

mocclean:
uiclean:

yaccclean:
lexclean:
clean:
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) ../../../binary/plugins/$(TARGET) $(TARGET)
	-$(DEL_FILE) ../../../binary/plugins/$(TARGET0) ../../../binary/plugins/$(TARGET1) ../../../binary/plugins/$(TARGET2) $(TARGETA)


FORCE:

####### Compile

StdSynapticLayer.o: StdSynapticLayer.cpp ../SynapticMap/SynapticMap.h

####### Install

install:  

uninstall:  

